'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(
  require('@babel/runtime/helpers/toConsumableArray'),
);
var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));
var _typeof2 = _interopRequireDefault(require('@babel/runtime/helpers/typeof'));
var _classnames = _interopRequireDefault(require('classnames'));
var _toArray = _interopRequireDefault(require('rc-util/lib/Children/toArray'));
var _useMergedState3 = _interopRequireDefault(require('rc-util/lib/hooks/useMergedState'));
var _react = _interopRequireDefault(require('react'));
var _Panel = _interopRequireDefault(require('./Panel'));
function getActiveKeysArray(activeKey) {
  var currentActiveKey = activeKey;
  if (!Array.isArray(currentActiveKey)) {
    var activeKeyType = (0, _typeof2.default)(currentActiveKey);
    currentActiveKey =
      activeKeyType === 'number' || activeKeyType === 'string' ? [currentActiveKey] : [];
  }
  return currentActiveKey.map(function (key) {
    return String(key);
  });
}
var Collapse = /*#__PURE__*/ _react.default.forwardRef(function (props, ref) {
  var _props$prefixCls = props.prefixCls,
    prefixCls = _props$prefixCls === void 0 ? 'rc-collapse' : _props$prefixCls,
    _props$destroyInactiv = props.destroyInactivePanel,
    destroyInactivePanel = _props$destroyInactiv === void 0 ? false : _props$destroyInactiv,
    style = props.style,
    accordion = props.accordion,
    className = props.className,
    rawChildren = props.children,
    collapsible = props.collapsible,
    openMotion = props.openMotion,
    expandIcon = props.expandIcon,
    rawActiveKey = props.activeKey,
    defaultActiveKey = props.defaultActiveKey,
    _onChange = props.onChange;
  var collapseClassName = (0, _classnames.default)(prefixCls, className);
  var _useMergedState = (0, _useMergedState3.default)([], {
      value: rawActiveKey,
      onChange: function onChange(v) {
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
      },
      defaultValue: defaultActiveKey,
      postState: getActiveKeysArray,
    }),
    _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
    activeKey = _useMergedState2[0],
    setActiveKey = _useMergedState2[1];
  var onClickItem = function onClickItem(key) {
    return setActiveKey(function () {
      if (accordion) {
        return activeKey[0] === key ? [] : [key];
      }
      var index = activeKey.indexOf(key);
      var isActive = index > -1;
      if (isActive) {
        return activeKey.filter(function (item) {
          return item !== key;
        });
      }
      return [].concat((0, _toConsumableArray2.default)(activeKey), [key]);
    });
  };

  // ======================== Children ========================
  var getNewChild = function getNewChild(child, index) {
    if (!child) return null;
    var key = child.key || String(index);
    var _child$props = child.props,
      header = _child$props.header,
      headerClass = _child$props.headerClass,
      childDestroyInactivePanel = _child$props.destroyInactivePanel,
      childCollapsible = _child$props.collapsible,
      childOnItemClick = _child$props.onItemClick;
    var isActive = false;
    if (accordion) {
      isActive = activeKey[0] === key;
    } else {
      isActive = activeKey.indexOf(key) > -1;
    }
    var mergeCollapsible =
      childCollapsible !== null && childCollapsible !== void 0 ? childCollapsible : collapsible;
    var handleItemClick = function handleItemClick(value) {
      if (mergeCollapsible === 'disabled') return;
      onClickItem(value);
      childOnItemClick === null || childOnItemClick === void 0 ? void 0 : childOnItemClick(value);
    };
    var childProps = {
      key: key,
      panelKey: key,
      header: header,
      headerClass: headerClass,
      isActive: isActive,
      prefixCls: prefixCls,
      destroyInactivePanel:
        childDestroyInactivePanel !== null && childDestroyInactivePanel !== void 0
          ? childDestroyInactivePanel
          : destroyInactivePanel,
      openMotion: openMotion,
      accordion: accordion,
      children: child.props.children,
      onItemClick: handleItemClick,
      expandIcon: expandIcon,
      collapsible: mergeCollapsible,
    };

    // https://github.com/ant-design/ant-design/issues/20479
    if (typeof child.type === 'string') {
      return child;
    }
    Object.keys(childProps).forEach(function (propName) {
      if (typeof childProps[propName] === 'undefined') {
        delete childProps[propName];
      }
    });
    return /*#__PURE__*/ _react.default.cloneElement(child, childProps);
  };
  var children = (0, _toArray.default)(rawChildren).map(getNewChild);

  // ======================== Render ========================
  return /*#__PURE__*/ _react.default.createElement(
    'div',
    {
      ref: ref,
      className: collapseClassName,
      style: style,
      role: accordion ? 'tablist' : undefined,
    },
    children,
  );
});
var _default = Object.assign(Collapse, {
  Panel: _Panel.default,
});
exports.default = _default;
