{"version":3,"file":"index.umd.js","sources":["../../src/constants.ts","../../src/radioBrowser.ts"],"sourcesContent":["/**\n * @public\n */\nexport const StationSearchOrder = {\n  name: 'name',\n  url: 'url',\n  homepage: 'homepage',\n  favicon: 'favicon',\n  tags: 'tags',\n  country: 'country',\n  state: 'state',\n  language: 'language',\n  votes: 'votes',\n  codec: 'codec',\n  bitrate: 'bitrate',\n  lastCheckOK: 'lastCheckOK',\n  lastCheckTime: 'lastCheckTime',\n  clickTimeStamp: 'clickTimeStamp',\n  clickCount: 'clickCount',\n  clickTrend: 'clickTrend',\n  random: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n  byUuid: 'byUuid',\n  byName: 'byName',\n  byNameExact: 'byNameExact',\n  byCodec: 'byCodec',\n  byCodexExact: 'byCodecExact',\n  byCountry: 'byCountry',\n  byCountryExact: 'byCountryExact',\n  byCountryCodeExact: 'byCountryCodeExact',\n  byState: 'byState',\n  byStateExact: 'byStateExact',\n  byLanguage: 'byLanguage',\n  byLanguageExact: 'byLanguageExact',\n  byTag: 'byTag',\n  byTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n  changeuuid: string\n  stationuuid: string\n  name: string\n  url: string\n  url_resolved: string\n  homepage: string\n  favicon: string\n  tags: string\n  country: string\n  countrycode: string\n  state: string\n  language: string\n  votes: number\n  lastchangetime: string\n  codec: string\n  bitrate: number\n  hls: number\n  lastcheckok: number\n  lastchecktime: string\n  lastlocalchecktime: string\n  lastcheckoktime: string\n  clicktimestamp: string\n  clickcount: number\n  clicktrend: number\n  geo_lat?: number | null\n  geo_long?: number | null\n}\n\n/**\n * @public\n */\nexport type Station = {\n  changeId: string\n  id: string\n  name: string\n  url: string\n  urlResolved: string\n  homepage: string\n  favicon: string\n  tags: string[]\n  country: string\n  countryCode: string\n  state: string\n  language: string[]\n  votes: number\n  lastChangeTime: Date\n  codec: string\n  bitrate: number\n  hls: boolean\n  lastCheckOk: boolean\n  lastCheckTime: Date\n  lastCheckOkTime: Date\n  lastLocalCheckTime: Date\n  clickTimestamp: Date\n  clickCount: number\n  clickTrend: number\n  geoLat?: number | null\n  geoLong?: number | null\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n  offset?: number\n  limit?: number\n  reverse?: boolean\n  order?: keyof typeof StationSearchOrder\n  hideBroken?: boolean\n  removeDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n  name?: string\n  nameExact?: boolean\n  country?: string\n  countryExact?: boolean\n  countryCode?: string\n  state?: string\n  stateExact?: boolean\n  language?: string\n  languageExact?: boolean\n  tag?: string\n  tagExact?: boolean\n  tagList?: string[]\n  codec?: string\n  bitrateMin?: string\n  bitrateMax?: string\n  hasGeoInfo?: boolean\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n  order?: 'name' | 'stationcount'\n  reverse?: boolean\n  hideBroken?: boolean\n} & Record<string, any>\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n  name: string\n  stationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n  country: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    // temporary fix for https cert error when in frontend\n    // hardcode the server\n    // https://github.com/segler-alex/radiobrowser-api-rust/issues/122\n    // if (typeof window !== 'undefined') {\n    //   return [{ ip: '45.77.62.161', name: 'fr1.api.radio-browser.info' }]\n    // }\n    const response = await fetch(\n      // this should be https when the above issue is resolved\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        geoLat: response.geo_lat,\n        geoLong: response.geo_long,\n        tags: Array.from(new Set(response.tags.split(','))).filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hidebroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && queryCopy.hideBroken === undefined) {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      const results = await this.resolveBaseUrl()\n      const random = Math.floor(Math.random() * results.length)\n      this.baseUrl = `https://${results[random].name}`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        let finalKey = key.toLowerCase()\n\n        switch (finalKey) {\n          case 'hasgeoinfo':\n            finalKey = 'has_geo_info'\n            break\n          case 'hidebroken':\n            finalKey = 'hidebroken'\n            break\n\n          case 'taglist':\n            // github.com/segler-alex/radiobrowser-api-rust/issues/80\n            finalKey = 'tagList' // tagList is the only one that is not lowercased\n        }\n\n        result += `&${finalKey}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result.length ? `?${result.slice(1)}` : ''\n  }\n}\n"],"names":["StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","appName","hideBroken","baseUrl","fetchConfig","method","redirect","this","Error","headers","resolveBaseUrl","config","fetch","response","ok","json","setBaseUrl","url","getBaseUrl","getCountries","search","query","runRequest","buildRequest","getCountryCodes","toUpperCase","getCodecs","getCountryStates","country","getLanguages","language","getTags","tag","toLowerCase","getStationsBy","searchType","removeDuplicates","_this14","stations","normalizeStations","result","duplicates","nameAndUrl","name","trim","station","changeId","changeuuid","id","stationuuid","urlResolved","url_resolved","homepage","favicon","countryCode","countrycode","state","votes","codec","bitrate","clickCount","clickcount","clickTrend","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastCheckTime","lastchecktime","geoLat","geo_lat","geoLong","geo_long","tags","Array","from","Set","filter","length","push","getAllStations","_this16","searchStations","_this18","undefined","getStationsByClicks","limit","resolveGetStations","getStationsByVotes","getStationsByRecentClicks","sendStationClick","voteForStation","getStationsById","ids","stationsIds","join","_this30","getStationByUrl","_this32","endPoint","_this34","addHideBrokenParam","queryCopy","encodeURIComponent","isArray","tagList","createQueryParams","_this36","finalConfig","results","random","Math","floor","params","Object","entries","value","finalKey","slice","version","lastCheckOK","clickTimeStamp"],"mappings":"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"}