"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.minifyFragmentSync = exports.minifySync = exports.minifyFragment = exports.minify = void 0;
const binding = __importStar(require("./binding"));
async function minify(content, options) {
    return binding.minify(content, toBuffer(options !== null && options !== void 0 ? options : {}));
}
exports.minify = minify;
async function minifyFragment(content, options) {
    return binding.minifyFragment(content, toBuffer(options !== null && options !== void 0 ? options : {}));
}
exports.minifyFragment = minifyFragment;
function minifySync(content, options) {
    return binding.minifySync(content, toBuffer(options !== null && options !== void 0 ? options : {}));
}
exports.minifySync = minifySync;
async function minifyFragmentSync(content, options) {
    return binding.minifyFragmentSync(content, toBuffer(options !== null && options !== void 0 ? options : {}));
}
exports.minifyFragmentSync = minifyFragmentSync;
function toBuffer(t) {
    return Buffer.from(JSON.stringify(t));
}
